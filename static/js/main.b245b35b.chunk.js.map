{"version":3,"sources":["images/default.png","images/audio-spectrum.gif","images/logo.png","images/Angelo.jpg","components/header.js","components/utils/iframe.js","components/utils/firebase.js","components/streaming.js","components/anime.js","components/list.js","components/chat.js","components/search.js","App.js","serviceWorker.js","components/redux/reducer.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","react_default","a","createElement","className","src","logo","alt","href","react_fontawesome_index_es","icon","userImage","Component","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","Streaming","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","loadData","bind","assertThisInitialized","state","songNow","songNext","_this2","songsArray","database","ref","orderByChild","equalTo","on","songList","forEach","snap","song","val","push","anime","name","type","concat","number","image","date","sort","b","Date","setState","console","log","frameborder","allowfullscreen","scrolling","height","width","style","backgroundImage","equalizer","Anime","removeSongFromList","id","update","inList","now","props","songInList","imageSrc","animeName","songName","onClick","e","songID","List","songs","key","map","i","anime_Anime","Chat","Search","searchSong","getInputValue","inputValue","target","value","text","startAt","limitToFirst","_this3","onChange","placeholder","addSongToList","library","add","faTimesCircle","faPlusSquare","faTrashAlt","faEdit","faExchangeAlt","App","containers","document","getElementsByClassName","length","PerfectScrollbar","wheelSpeed","wheelPropagation","minScrollbarLength","header_Header","streaming_Streaming","list_List","chat_Chat","search_Search","Boolean","window","location","hostname","match","initialState","reducer","arguments","undefined","action","newState","objectSpread","store","createStore","ReactDOM","render","es","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b245b35b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/default.ace320ea.png\";","module.exports = __webpack_public_path__ + \"static/media/audio-spectrum.01c8c17a.gif\";","module.exports = __webpack_public_path__ + \"static/media/logo.b909e3c1.png\";","module.exports = __webpack_public_path__ + \"static/media/Angelo.7f91d966.jpg\";","import React, { Component } from 'react';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport logo from '../images/logo.png';\r\nimport userImage from '../images/Angelo.jpg';\r\n\r\nexport default class Header extends Component {\r\n\r\n    render(){\r\n        return(\r\n            <header className=\"App-header\">\r\n                <figure>\r\n                    <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n                    <figcaption>Anime Sama Radio</figcaption>\r\n                </figure>\r\n                <nav>\r\n                    <ul>\r\n                        <a className=\"App-link\" href=\"/\">\r\n                        <FontAwesomeIcon icon=\"plus-square\" />\r\n                        </a>\r\n                        <a className=\"App-link\" href=\"/\"><FontAwesomeIcon icon=\"edit\" /></a>\r\n                        <a className=\"App-link\" href=\"/\"><FontAwesomeIcon icon=\"trash-alt\" /></a>\r\n                    </ul>\r\n                    <p>\r\n                    <span>Bienvenido, Anghelo</span> <img src={userImage} alt=\"Usuario\" />\r\n                    </p>\r\n                </nav>    \r\n            </header>\r\n\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nexport default class Iframe extends Component {\r\n\r\n    render(){\r\n        return(\r\n            <div>          \r\n                <iframe src={this.props.src} height={this.props.height} width={this.props.width}/>         \r\n            </div>\r\n        );\r\n    }\r\n}","// Importing Firebase\r\nimport * as firebase from 'firebase/app';\r\nimport 'firebase/storage';\r\nimport 'firebase/database';\r\n\r\nconst config = {\r\n  apiKey: \"AIzaSyAjKp_f5F1Tp22oJGQscVHQ6YYgXQH02VE\",\r\n  authDomain: \"anime-sama-radio.firebaseapp.com\",\r\n  databaseURL: \"https://anime-sama-radio.firebaseio.com\",\r\n  projectId: \"anime-sama-radio\",\r\n  storageBucket: \"anime-sama-radio.appspot.com\",\r\n  messagingSenderId: \"709190102912\"\r\n}\r\n\r\nfirebase.initializeApp(config);\r\n\r\nexport default firebase","import React, { Component } from 'react';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport defaultAnimeImage from '../images/default.png';\r\nimport equalizer from '../images/audio-spectrum.gif';\r\n\r\nimport Iframe from '../components/utils/iframe';\r\n\r\nimport firebase from './utils/firebase';\r\n\r\nexport default class Streaming extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        //this.updateMessage = this.updateMessage.bind(this);\r\n        //this.submitMessage = this.submitMessage.bind(this);\r\n        this.loadData = this.loadData.bind(this);\r\n        this.state = {\r\n            songNow: [],\r\n            songNext: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.loadData()\r\n    }\r\n\r\n    loadData() {\r\n\r\n        let songsArray = []\r\n\r\n        firebase.database().ref('songs/').orderByChild('inList').equalTo(true).on('value', songList => {\r\n            songsArray = []\r\n            songList.forEach(function(snap) {\r\n                var song = snap.val();\r\n\r\n                songsArray.push({\r\n                    anime: song.name,\r\n                    type: `${song.type} ${song.number}`,\r\n                    image: song.image,\r\n                    date: song.date\r\n                })\r\n            })\r\n\r\n            songsArray.sort(function(a, b) { \r\n                return new Date(a.date) - new Date(b.date);\r\n            })\r\n\r\n            this.setState({\r\n                songNow: songsArray[0],\r\n                songNext: songsArray[1]\r\n            })\r\n            \r\n            console.log(this.state.songNow,this.state.songNext)\r\n        })\r\n    }\r\n\r\n    render(){\r\n        const songNow = this.state.songNow\r\n\r\n        if(songNow) {\r\n\r\n        return(\r\n            <section className=\"App-streaming\">\r\n                <div className=\"App-streaming-header\">\r\n                    <div className=\"App-streaming-header-item Anime-component\">\r\n                        <span className=\"now-listening-tag\">Ahora estás escuchando:</span>\r\n                        <img src={songNow.image}/>\r\n                        <p>\r\n                            <h4>{songNow.anime}</h4>\r\n                            <span>{songNow.type} {songNow.number}</span>\r\n                        </p>\r\n                    </div>\r\n                    <a className=\"App-streaming-header-switcher App-link\" href=\"/\"><FontAwesomeIcon icon=\"exchange-alt\" /></a>\r\n                </div>\r\n                <div className=\"App-streaming-body\">\r\n                    <div className=\"App-streaming-body-player\">\r\n                    <iframe src=\"https://player.twitch.tv/?channel=mirainosoramusic\" frameborder=\"0\" allowfullscreen=\"true\" scrolling=\"no\" height=\"440\" width=\"100%\"></iframe>\r\n                    </div>\r\n                    <div style={{ backgroundImage: `url(${songNow.image})` }} className=\"App-streaming-body-audio\">\r\n                        <div className=\"App-streaming-body-audio-content\">\r\n                            <img src={equalizer} />\r\n                            <p>\r\n                            <h2>{songNow.anime}</h2>\r\n                            <span>{songNow.type} {songNow.number}</span>\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        );\r\n\r\n        }else{\r\n\r\n            return( \r\n                <section className=\"App-streaming\">\r\n                <div className=\"App-streaming-header\">\r\n                    <div className=\"App-streaming-header-item Anime-component\">\r\n                        <p>No hay canciones en lista</p>\r\n                    </div>\r\n                    <a className=\"App-streaming-header-switcher App-link\" href=\"/\"><FontAwesomeIcon icon=\"exchange-alt\" /></a>\r\n                </div>\r\n                <div className=\"App-streaming-body\">\r\n                    <div className=\"App-streaming-body-player\">\r\n                    <iframe src=\"https://player.twitch.tv/?channel=mirainosoramusic\" frameborder=\"0\" allowfullscreen=\"true\" scrolling=\"no\" height=\"440\" width=\"100%\"></iframe>\r\n                    </div>\r\n                    <div className=\"App-streaming-body-audio\">\r\n                        <div className=\"App-streaming-body-audio-content\">\r\n                            <img src={equalizer} />\r\n                            <p>\r\n                                <h2>Anime Sama Radio</h2>\r\n                                <span>La mejor música anime solo aquí</span>\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n            )\r\n        }\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nimport defaultAnimeImage from '../images/default.png';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport firebase from './utils/firebase';\r\nimport { timeout } from 'q';\r\n\r\nexport default class Anime extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        //this.updateMessage = this.updateMessage.bind(this);\r\n        //this.submitMessage = this.submitMessage.bind(this);\r\n        this.removeSongFromList = this.removeSongFromList.bind(this);\r\n    }\r\n\r\n    removeSongFromList(id) {\r\n\r\n\r\n        firebase.database().ref('songs/' + id).update({\r\n            inList: false,\r\n            date: Date.now()\r\n        })\r\n        \r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className={\"Anime-component \" + (this.props.songInList ? 'song-in-list': 'song-not-in-list')}>\r\n                <div className=\"Anime-component-body\">\r\n                    <img src={this.props.imageSrc} />\r\n                    <p>\r\n                        <h4>{this.props.animeName}</h4>\r\n                        <span>{this.props.songName}</span>\r\n                    </p>\r\n                </div>\r\n                <button onClick={e => {this.removeSongFromList(this.props.songID)}}><FontAwesomeIcon icon=\"times-circle\" /></button>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nimport defaultAnimeImage from '../images/default.png';\r\n\r\nimport Anime from './anime';\r\n\r\nimport firebase from './utils/firebase';\r\n\r\nexport default class List extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        //this.updateMessage = this.updateMessage.bind(this);\r\n        //this.submitMessage = this.submitMessage.bind(this);\r\n        this.loadData = this.loadData.bind(this);\r\n        this.state = {\r\n            songs: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.loadData()\r\n    }\r\n\r\n    loadData() {\r\n\r\n        let songsArray = []\r\n\r\n        firebase.database().ref('songs/').orderByChild('inList').equalTo(true).on('value', songList => {\r\n            songsArray = []\r\n            songList.forEach(function(snap) {\r\n                let song = snap.val();\r\n                let key = snap.key\r\n                console.log(key)\r\n                songsArray.push({\r\n                    id: key,\r\n                    anime: song.name,\r\n                    type: `${song.type} ${song.number}`,\r\n                    image: song.image,\r\n                    date: song.date\r\n                })\r\n            })\r\n\r\n            songsArray.sort(function(a, b) { \r\n                return new Date(a.date) - new Date(b.date);\r\n            })\r\n\r\n            this.setState({\r\n                songs: songsArray\r\n            })\r\n            \r\n        })\r\n    }\r\n\r\n    render() {\r\n\r\n        //const currentSongs = this.state.songs.map((el, i) => <li key={i}>{el.anime}</li>);\r\n\r\n        return(\r\n            <section className=\"App-list\">\r\n                <div className=\"App-list-header\">\r\n                    <a href=\"/\">En cola</a>\r\n                    <a href=\"/\">Sugeridos</a>\r\n                    <a href=\"/\">Reproducidos</a>\r\n                </div>\r\n                <div id=\"container\" className=\"container App-list-body\">\r\n                    { this.state.songs.map( (song,i) => {\r\n                        if(song) {\r\n\r\n                            return <Anime key={i} songID={song.id} imageSrc={song.image} animeName={song.anime} songName={song.type} />\r\n                        \r\n                        }else {\r\n\r\n                            return( 'No hay canciones en lista' )\r\n\r\n                        }\r\n                    })}\r\n                </div>\r\n            </section>\r\n\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nimport Anime from './anime';\r\n\r\nexport default class Chat extends Component {\r\n\r\n    render(){\r\n        return(\r\n            <section className=\"App-chat\">\r\n                <iframe src=\"https://www.twitch.tv/embed/mirainosoramusic/chat?darkpopout\"\r\n                frameborder=\"0\"\r\n                scrolling=\"no\"\r\n                height=\"500\"\r\n                width=\"100%\"></iframe>\r\n            </section>\r\n\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nimport defaultAnimeImage from '../images/default.png';\r\n\r\nimport Anime from './anime';\r\n\r\nimport firebase from './utils/firebase';\r\n\r\nexport default class Search extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        //this.updateMessage = this.updateMessage.bind(this);\r\n        //this.submitMessage = this.submitMessage.bind(this);\r\n        this.searchSong = this.searchSong.bind(this);\r\n        this.getInputValue = this.getInputValue.bind(this);\r\n        this.state = {\r\n            songs: [],\r\n            inputValue: ''\r\n        }\r\n    }\r\n\r\n    getInputValue(e) {\r\n\r\n        this.setState({\r\n            inputValue: e.target.value\r\n        })\r\n\r\n        this.searchSong(e)\r\n    }\r\n\r\n    searchSong(e) {\r\n\r\n        let songsArray = []\r\n\r\n        const text = this.state.inputValue\r\n\r\n        if(e) {\r\n\r\n            firebase.database().ref('songs/').orderByChild('name').startAt(text).limitToFirst(10).on('value', songList => {\r\n                songsArray = []\r\n                songList.forEach(function(snap) {\r\n                    let song = snap.val()\r\n                    let key = snap.key\r\n    \r\n                    songsArray.push({\r\n                        id: key,\r\n                        anime: song.name,\r\n                        type: `${song.type} ${song.number}`,\r\n                        image: song.image,\r\n                        date: song.date,\r\n                        inList: song.inList\r\n                    })\r\n                })\r\n    \r\n                this.setState({\r\n                    songs: songsArray\r\n                })\r\n                \r\n            })\r\n\r\n        }\r\n        \r\n    }\r\n\r\n    addSongToList(id) {\r\n\r\n        firebase.database().ref('songs/' + id).update({\r\n            inList: true,\r\n            date: Date.now()\r\n        })\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <section className=\"App-search\">\r\n                <div className=\"App-search-header\">\r\n                    <form>\r\n                        <input id=\"search-song\" onChange={e => this.getInputValue(e)} type=\"text\" placeholder=\"Pide una canción...\" />\r\n                    </form>\r\n                </div>\r\n                <div id=\"container2\" className=\"App-search-body container\">\r\n                    { this.state.songs.map( (song,i) => {\r\n                        return <div onClick={e => {this.addSongToList(song.id)}}><Anime songInList={song.inList} key={i} imageSrc={song.image} animeName={song.anime} songName={song.type} /></div>\r\n                    })}\r\n                </div>\r\n            </section>\r\n\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\n\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faTimesCircle, faPlusSquare, faTrashAlt, faEdit, faExchangeAlt } from '@fortawesome/free-solid-svg-icons';\n\nimport './css/App.css';\nimport './css/perfect-scrollbar.css';\nimport PerfectScrollbar from 'perfect-scrollbar';\n\n// Importing local components\nimport Header from './components/header';\nimport Streaming from './components/streaming';\nimport List from './components/list';\nimport Chat from './components/chat';\nimport Search from './components/search';\n\n// FontAwesome Icons \nlibrary.add(faTimesCircle);\nlibrary.add(faPlusSquare);\nlibrary.add(faTrashAlt);\nlibrary.add(faEdit);\nlibrary.add(faExchangeAlt);\n\nclass App extends Component {\n\n  componentDidMount () {\n    const containers = document.getElementsByClassName('container');\n    for (let i = 0; i < containers.length; i++) {\n      const ps = new PerfectScrollbar(containers[i], {\n        wheelSpeed: 2,\n        wheelPropagation: false,\n        minScrollbarLength: 20\n      });\n    }\n    \n\n}\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <main>\n          <Streaming />\n          <List />\n          <Chat />\n          <Search />\n        </main>\n        <footer className=\"App-footer\">\n          <p>Anime Sama © 2018 - Amamos las buenas historias</p>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\r\n    songs: []\r\n};\r\n\r\nconst reducer = (state=initialState, action) => {\r\n    const newState = {...state};\r\n\r\n    switch(action.type){\r\n        case 'ADD_SONG_IN_LIST': \r\n            newState.songs = [];\r\n            break;\r\n        \r\n        case 'REMOVE_SONG_FROM_LIST': \r\n            newState.songs = [];\r\n            break;\r\n    }\r\n    return newState;\r\n};\r\n\r\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport reducer from './components/redux/reducer'\n\nconst store = createStore(reducer);\n\nReactDOM.render(\n<Provider store={ store }>\n    <App />\n</Provider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}